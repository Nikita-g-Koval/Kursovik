Index: add_baseQuestion_window.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\r\nfrom tkinter import messagebox\r\nfrom questionsStrorage import QuestionsStorage\r\nfrom validation import Validation\r\nfrom fileProvider import FileProvider\r\nfrom question import Question\r\nfrom answer import Answer\r\nfrom user import User\r\nfrom window import Window\r\nimport addQuestion_window\r\nimport menu_window\r\nimport customtkinter\r\n\r\n\r\nclass AddBaseQuestionWindow(Window):\r\n    \"\"\"Класс AddBaseQuestionWindow - инициализирует окно для добавления базового вопроса.\"\"\"\r\n    def __init__(self, questions_storage: QuestionsStorage, user: User):\r\n        \"\"\"Устанавливает все необходимые атрибуты для объекта AddBaseQuestionWindow.\"\"\"\r\n        super().__init__()\r\n\r\n        self.questions_storage = questions_storage\r\n        self.user = user\r\n\r\n        self.title('Добавление вопроса')\r\n        self.resizable(False, True)\r\n\r\n\r\n        self.grid_columnconfigure(0, weight=1)\r\n\r\n\r\n        # Создание рамки для строк ввода\r\n        self.inputs_frame = customtkinter.CTkFrame(self)\r\n        self.inputs_frame.grid(row=0, column=0, padx=10, pady=(10, 0), columnspan=2)\r\n\r\n        customtkinter.CTkLabel(self.inputs_frame, text=\"Текст вопроса:\").grid(row=0, column=0, padx=10,\r\n                                                                              pady=(10, 0), sticky=\"nw\")\r\n        self.questionText_entry = customtkinter.CTkEntry(self.inputs_frame, height=70, width=500)\r\n        self.questionText_entry.grid(row=1, column=0, padx=10, pady=(10, 10), sticky=\"nw\")\r\n\r\n        customtkinter.CTkLabel(self.inputs_frame, text=\"Ответ на вопрос:\").grid(row=2, column=0, padx=10,\r\n                                                                                pady=(10, 0), sticky=\"nw\")\r\n        self.answer_entry = customtkinter.CTkEntry(self.inputs_frame, height=70, width=500)\r\n        self.answer_entry.grid(row=3, column=0, padx=10, pady=(10, 10), sticky=\"nw\")\r\n\r\n\r\n        # Создание рамки для кнопок добавления вопроса\r\n        self.buttons_frame = customtkinter.CTkFrame(self)\r\n        self.buttons_frame.grid(row=1, column=0, padx=10, pady=(10, 10), sticky=NW)\r\n\r\n        self.add_question_btn = customtkinter.CTkButton(self.buttons_frame, text=\"Добавить вопрос\",\r\n                                       command=self._add_question_btn_click, height=66)\r\n        self.add_question_btn.grid(row=0, column=0, padx=10, pady=(10, 10))\r\n\r\n        self.save_changes_btn = customtkinter.CTkButton(self.buttons_frame, text=\"Сохранить изменения\",\r\n                                       command=self._save_changes_btn_click, height=66)\r\n        self.save_changes_btn.grid(row=0, column=1, padx=(0,10), pady=(10, 10))\r\n\r\n\r\n        # Создание рамки для кнопок возврата в меню или назад\r\n        self.return_buttons_frame = customtkinter.CTkFrame(self)\r\n        self.return_buttons_frame.grid(row=1, column=1, padx=10, pady=(10, 10))\r\n\r\n        self.back_to_menu_btn = customtkinter.CTkButton(self.return_buttons_frame, text='Назад',\r\n                                                        command=self.return_btn_click)\r\n        self.back_to_menu_btn.grid(row=0, column=0, padx=10, pady=(10, 10))\r\n\r\n        self.back_to_menu_btn = customtkinter.CTkButton(self.return_buttons_frame, text='Вернуться в меню',\r\n                                                        command=self.back_to_menu_btn_click)\r\n        self.back_to_menu_btn.grid(row=1, column=0, padx=10, pady=(0, 10))\r\n\r\n        self._place()\r\n\r\n\r\n        self.mainloop()\r\n\r\n    def _add_question_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки add_question_btn - добавляет новый вопрос, ничего не возвращает.\"\"\"\r\n        input_question = self.questionText_entry.get()\r\n        input_answer = self.answer_entry.get()\r\n\r\n        if not Validation.validate_question(input_question):\r\n            messagebox.showwarning(title=\"Предупреждение\", message=\"Длина вопроса должна быть > 0 и < 120.\")\r\n            return\r\n\r\n        if not Validation.validate_answer(input_answer):\r\n            messagebox.showwarning(title=\"Предупреждение\", message=\"Не был введён ответ.\")\r\n            return\r\n\r\n        answers = [Answer(input_answer, True)]\r\n        question = Question(input_question, answers)\r\n\r\n        self.questions_storage.add_question(question)\r\n        messagebox.showinfo(title=\"Оповещение\", message=\"Вопрос успешно добавлен. Сохраните изменения.\")\r\n\r\n    def _save_changes_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки save_changes_btn - сохраняет текущие вопросы, ничего не возвращает.\"\"\"\r\n        FileProvider.save_test_changes(self.questions_storage.test, self.questions_storage.test_path)\r\n        messagebox.showinfo(title=\"Оповещение\", message=\"Изменения сохранены.\")\r\n\r\n    def return_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки back_to_menu_btn - удаляет данное окно и создаёт объект MenuWindow.\"\"\"\r\n        self.withdraw()\r\n        addQuestion_window.AddQuestionWindow(self.questions_storage, self.user)\r\n        self.destroy()\r\n\r\n    def back_to_menu_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки back_to_menu_btn - удаляет данное окно и создаёт объект MenuWindow.\"\"\"\r\n        self.withdraw()\r\n        menu_window.MenuWindow(self.user)\r\n        self.destroy()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/add_baseQuestion_window.py b/add_baseQuestion_window.py
--- a/add_baseQuestion_window.py	(revision 3221a29cd16a63f105e330f633aa63662d5fcc86)
+++ b/add_baseQuestion_window.py	(date 1744099935071)
@@ -21,6 +21,8 @@
         self.questions_storage = questions_storage
         self.user = user
 
+        self.width = 540
+        self.height = 380
         self.title('Добавление вопроса')
         self.resizable(False, True)
 
Index: add_radioButtonQuestion_window.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\r\nfrom tkinter import messagebox\r\nfrom typing import List\r\nimport addQuestion_window\r\nimport menu_window\r\nfrom questionsStrorage import QuestionsStorage\r\nfrom validation import Validation\r\nfrom fileProvider import FileProvider\r\nfrom question import Question\r\nfrom answer import Answer\r\nfrom question_radioButton import QuestionRadioButton\r\nfrom user import User\r\nfrom window import Window\r\nimport customtkinter\r\n\r\n\r\nclass AddRadioButtonQuestion(Window):\r\n    \"\"\"Класс AddRadioButtonQuestion - инициализирует окно для добавления вопроса с единственным выбором.\"\"\"\r\n    new_question: Question\r\n\r\n    def __init__(self, questions_storage: QuestionsStorage, user: User):\r\n        \"\"\"Устанавливает все необходимые атрибуты для объекта AddRadioButtonQuestion.\"\"\"\r\n        super().__init__()\r\n\r\n        self.answers: List[Answer] = []\r\n        self.questions_storage = questions_storage\r\n        self.user = user\r\n\r\n        self.title('Добавление вопроса с выбором')\r\n        self.geometry('810x410')\r\n        self.resizable(False, True)\r\n        self.selected_id = IntVar(self)\r\n        self.radio_buttons = []\r\n\r\n        self._place()\r\n\r\n        self.selected_true = BooleanVar(self)\r\n        self.selected_true.set(False)\r\n\r\n\r\n        # Создание рамки для радио-кнопок\r\n        self.radiobuttons_frame = customtkinter.CTkFrame(self, width=250)\r\n        self.radiobuttons_frame.grid(row=0, column=1, padx=(0, 10), pady=(10, 0), sticky=\"ns\")\r\n\r\n        # Создание рамки для строк ввода\r\n        self.inputs_frame = customtkinter.CTkFrame(self)\r\n        self.inputs_frame.grid(row=0, column=0, padx=10, pady=(10, 0), sticky=\"nsw\")\r\n\r\n        customtkinter.CTkLabel(self.inputs_frame, text=\"Текст вопроса:\", justify=LEFT).grid(row=0, column=0, sticky=W)\r\n        self.questionText_entry = customtkinter.CTkEntry(self.inputs_frame, height=70, width=500, justify=LEFT)\r\n        self.questionText_entry.grid(row=1, column=0, padx=10, pady=(10, 0), sticky=\"nsw\")\r\n\r\n        customtkinter.CTkLabel(self.inputs_frame, text=\"Ответ на вопрос:\",\r\n              justify=LEFT).grid(row=2, column=0, padx=10, pady=(10, 0), sticky=\"nsw\")\r\n        self.answer_entry = customtkinter.CTkEntry(self.inputs_frame, height=70, width=500, justify=LEFT)\r\n        self.answer_entry.grid(row=3, column=0, padx=10, pady=(10, 0), sticky=\"nsw\")\r\n\r\n        self.answer_is_correct_checkBtn = customtkinter.CTkCheckBox(self.inputs_frame,\r\n                                                      text=\"Ответ верный\",\r\n                                                      variable=self.selected_true)\r\n        self.answer_is_correct_checkBtn.grid(row=4, column=0, padx=10, pady=(10, 10), sticky=\"nsw\")\r\n\r\n\r\n        # Создание рамки для кнопок ответа\r\n        self.buttons_a_frame = customtkinter.CTkFrame(self)\r\n        self.buttons_a_frame.grid(row=1, column=0, padx=10, pady=(10, 10), sticky=\"nsw\")\r\n\r\n        self.add_answer_btn = customtkinter.CTkButton(self.buttons_a_frame, text=\"Добавить ответ\",\r\n                                                      command=self._add_answer_btn_click, width=160)\r\n        self.add_answer_btn.grid(row=0, column=0, padx=(10,0), pady=(10, 10), sticky=\"nsw\")\r\n\r\n        self.remove_answer_btn = customtkinter.CTkButton(self.buttons_a_frame, text=\"Удалить ответ\",\r\n                                        command=self._remove_answer_btn_click, width=160)\r\n        self.remove_answer_btn.grid(row=0, column=1, padx=10, pady=(10, 10), sticky=\"nsw\")\r\n\r\n\r\n        # Создание рамки для кнопок вопроса\r\n        self.buttons_q_frame = customtkinter.CTkFrame(self)\r\n        self.buttons_q_frame.grid(row=2, column=0, padx=10, pady=(0, 10), sticky=\"nsw\")\r\n\r\n        self.add_question_btn = customtkinter.CTkButton(self.buttons_q_frame, text=\"Добавить вопрос\",\r\n                                       command=self._add_question_btn_click, width=160)\r\n        self.add_question_btn.grid(row=0, column=0, padx=(10, 0), pady=(10, 10), sticky=\"nsw\")\r\n\r\n        self.save_changes_btn = customtkinter.CTkButton(self.buttons_q_frame, text=\"Сохранить изменения\",\r\n                                       command=self._save_changes_btn_click, width=160)\r\n        self.save_changes_btn.grid(row=0, column=1, padx=10, pady=(10, 10), sticky=\"nsw\")\r\n\r\n\r\n        # Создание рамки для кнопок возврата в меню или назад\r\n        self.return_buttons_frame = customtkinter.CTkFrame(self)\r\n        self.return_buttons_frame.grid(row=1, column=1, padx=10, pady=(10, 10), rowspan=2, sticky=\"se\")\r\n\r\n        self.back_to_menu_btn = customtkinter.CTkButton(self.return_buttons_frame, text='Назад',\r\n                                                        command=self.return_btn_click)\r\n        self.back_to_menu_btn.grid(row=0, column=0, padx=10, pady=(10, 10), sticky=E)\r\n\r\n        self.back_to_menu_btn = customtkinter.CTkButton(self.return_buttons_frame, text='Вернуться в меню',\r\n                                                        command=self.back_to_menu_btn_click)\r\n        self.back_to_menu_btn.grid(row=1, column=0, padx=10, pady=(0, 10), sticky=E)\r\n\r\n\r\n        self.mainloop()\r\n\r\n    def _add_answer_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки add_answer_btn - добавляет новый ответ, ничего не возвращает.\"\"\"\r\n        if len(self.answers) >= 6:\r\n            messagebox.showwarning(title=\"Предупреждение\",\r\n                                   message=\"Максимальное количество ответов 6. Больше добавить нельзя.\")\r\n            return\r\n        input_answer = self.answer_entry.get()\r\n        if len(input_answer) == 0:\r\n            messagebox.showwarning(title=\"Предупреждение\", message=\"Данные не были введены!\")\r\n            return\r\n\r\n        correctness = self.selected_true.get()\r\n\r\n        if self._had_correct_answer() and correctness:\r\n            messagebox.showwarning(title=\"Предупреждение\",\r\n                                   message=\"В данном типе вопроса может быть только один правильный ответ\")\r\n            return\r\n\r\n        answer = Answer(input_answer, correctness)\r\n        self.answers.append(answer)\r\n        self._init_radiobuttons()\r\n\r\n    def _remove_answer_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки remove_answer_btn - удаляет выбранный пользователем ответ, ничего не возвращает.\"\"\"\r\n        if len(self.answers) > 0:\r\n            del self.answers[self.selected_id.get()]\r\n            self._init_radiobuttons()\r\n\r\n    def _add_question_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки add_question_btn - добавляет новый вопрос, ничего не возвращает.\"\"\"\r\n        question_text = self.questionText_entry.get()\r\n\r\n        if not Validation.validate_question(question_text):\r\n            messagebox.showwarning(title=\"Предупреждение\",\r\n                                   message=\"Введены некорректные данные! Введите текст вопроса.\")\r\n            return\r\n\r\n        if len(self.answers) < 2:\r\n            messagebox.showwarning(title=\"Предупреждение\",\r\n                                   message=\"Количество вопросов должно быть не менее двух!\")\r\n            return\r\n\r\n        if not self._had_correct_answer():\r\n            messagebox.showwarning(title=\"Предупреждение\",\r\n                                   message=\"Хотя бы один вопрос должен быть правильным!\")\r\n            return\r\n\r\n        self.new_question = QuestionRadioButton(question_text, self.answers)\r\n        self.questions_storage.add_question(self.new_question)\r\n        messagebox.showinfo(title=\"Успешно\", message=\"Вопрос добавлен.\")\r\n\r\n    def _save_changes_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки save_changes_btn - сохраняет текущие вопросы, ничего не возвращает.\"\"\"\r\n        FileProvider.save_test_changes(self.questions_storage.test, self.questions_storage.test_path)\r\n        messagebox.showinfo(title=\"Успешно\", message=\"Изменения сохранены.\")\r\n\r\n    def _init_radiobuttons(self):\r\n        \"\"\"Инициализирует radiobuttons в соответствии с вопросами, ничего не возвращает.\"\"\"\r\n        self._clear_radiobuttons()\r\n        for i in range(len(self.answers)):\r\n            answer_btn = customtkinter.CTkRadioButton(self.radiobuttons_frame, text=self.answers[i].text, value=i,\r\n                                     variable=self.selected_id)\r\n\r\n            if self.answers[i].is_correct:\r\n                answer_btn.configure(text_color=\"green\")\r\n\r\n            answer_btn.grid(row=i, column=0)\r\n            self.radio_buttons.append(answer_btn)\r\n\r\n    def _clear_radiobuttons(self):\r\n        \"\"\"Удаляет все инициализированные radiobuttons, ничего не возвращает.\"\"\"\r\n        for btn in self.radio_buttons:\r\n            btn.destroy()\r\n        self.radio_buttons.clear()\r\n\r\n    def _had_correct_answer(self):\r\n        \"\"\"Проверяет наличие правильного ответа, возвращает True - при наличии, False - при отсутствии.\"\"\"\r\n        one_is_correct = False\r\n        for answer in self.answers:\r\n            if answer.is_correct:\r\n                one_is_correct = True\r\n                break\r\n\r\n        return one_is_correct\r\n\r\n    def return_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки back_to_menu_btn - удаляет данное окно и создаёт объект MenuWindow.\"\"\"\r\n        self.withdraw()\r\n        addQuestion_window.AddQuestionWindow(self.questions_storage, self.user)\r\n        self.destroy()\r\n\r\n    def back_to_menu_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки back_to_menu_btn - удаляет данное окно и создаёт объект MenuWindow.\"\"\"\r\n        self.withdraw()\r\n        menu_window.MenuWindow(self.user)\r\n        self.destroy()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/add_radioButtonQuestion_window.py b/add_radioButtonQuestion_window.py
--- a/add_radioButtonQuestion_window.py	(revision 3221a29cd16a63f105e330f633aa63662d5fcc86)
+++ b/add_radioButtonQuestion_window.py	(date 1744099799769)
@@ -27,7 +27,8 @@
         self.user = user
 
         self.title('Добавление вопроса с выбором')
-        self.geometry('810x410')
+        self.width = 810
+        self.height = 400
         self.resizable(False, True)
         self.selected_id = IntVar(self)
         self.radio_buttons = []
Index: add_checkButtonQuestion_window.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from tkinter import *\r\nfrom tkinter import messagebox\r\nfrom typing import List\r\nimport addQuestion_window\r\nimport menu_window\r\nfrom questionsStrorage import QuestionsStorage\r\nfrom validation import Validation\r\nfrom fileProvider import FileProvider\r\nfrom question import Question\r\nfrom answer import Answer\r\nfrom question_checkButton import QuestionCheckButton\r\nfrom user import User\r\nfrom window import Window\r\nimport customtkinter\r\n\r\n\r\nclass AddCheckButtonQuestion(Window):\r\n    \"\"\"Класс AddCheckButtonQuestion - инициализирует окно для добавления вопроса с множественным выбором.\"\"\"\r\n    new_question: Question\r\n\r\n    def __init__(self, questions_storage: QuestionsStorage, user: User):\r\n        \"\"\"Устанавливает все необходимые атрибуты для объекта AddCheckButtonQuestion.\"\"\"\r\n        super().__init__()\r\n        self.answers: List[Answer] = []\r\n        self.questions_storage = questions_storage\r\n        self.user = user\r\n\r\n        self.geometry(\"800x420\")\r\n        self.title('Добавление вопроса с множественным выбором')\r\n        self.resizable(False, True)\r\n\r\n        self._place()\r\n\r\n        self.check_buttons = []\r\n        self.selections: List[IntVar] = []\r\n\r\n        self.selected_true = BooleanVar(self)\r\n        self.selected_true.set(False)\r\n\r\n\r\n        # Создание рамки для чекбоксов ответов\r\n        self.checkboxes_frame = customtkinter.CTkFrame(self, width=250)\r\n        self.checkboxes_frame.grid(row=0, column=1, padx=(10, 10), pady=(10, 0), sticky=\"ns\")\r\n\r\n\r\n        # Создание рамки для строк ввода\r\n        self.inputs_frame = customtkinter.CTkFrame(self)\r\n        self.inputs_frame.grid(row=0, column=0, padx=(10,0), pady=(10, 0), sticky=\"nsw\")\r\n\r\n        customtkinter.CTkLabel(self.inputs_frame, text=\"Текст вопроса:\", justify=LEFT).grid(row=0, column=0, sticky=W,\r\n                                                                                            padx=10, pady=(10,0))\r\n        self.questionText_entry = customtkinter.CTkEntry(self.inputs_frame, height=70, width=500, justify=LEFT)\r\n        self.questionText_entry.grid(row=1, column=0, sticky=EW, padx=10, pady=(10, 0))\r\n\r\n        customtkinter.CTkLabel(self.inputs_frame, text=\"Ответ на вопрос:\", justify=LEFT).grid(row=2, column=0, sticky=W,\r\n                                                                             padx=10, pady=(10,0))\r\n        self.answer_entry = customtkinter.CTkEntry(self.inputs_frame, height=70, width=500, justify=LEFT)\r\n        self.answer_entry.grid(row=3, column=0, sticky=EW, padx=10, pady=(10, 0))\r\n\r\n        self.answer_is_correct_checkBtn = customtkinter.CTkCheckBox(self.inputs_frame,\r\n                                                      text=\"Ответ верный\",\r\n                                                      variable=self.selected_true)\r\n        self.answer_is_correct_checkBtn.grid(row=4, column=0, sticky=EW, padx=10, pady=(10, 10))\r\n\r\n\r\n        # Создание рамки для кнопок добавления ответов\r\n        self.buttons_a_frame = customtkinter.CTkFrame(self)\r\n        self.buttons_a_frame.grid(row=1, column=0, padx=10, pady=(10, 10), sticky=\"nsw\")\r\n\r\n        self.add_answer_btn = customtkinter.CTkButton(self.buttons_a_frame, text=\"Добавить ответ\",\r\n                                     command=self._add_answer_btn_click, width=160)\r\n        self.add_answer_btn.grid(row=0, column=0, padx=(10, 0), pady=10, sticky=\"nsw\")\r\n\r\n        self.remove_answer_btn = customtkinter.CTkButton(self.buttons_a_frame, text=\"Удалить ответ\",\r\n                                        command=self._remove_answer_btn_click, width=160)\r\n        self.remove_answer_btn.grid(row=0, column=1, padx=(10,10), pady=10)\r\n\r\n\r\n        # Создание рамки для кнопок вопроса\r\n        self.buttons_q_frame = customtkinter.CTkFrame(self)\r\n        self.buttons_q_frame.grid(row=2, column=0, padx=10, pady=(0, 10), sticky=\"nsw\")\r\n\r\n        self.add_question_btn = customtkinter.CTkButton(self.buttons_q_frame, text=\"Добавить вопрос\",\r\n                                       command=self._add_question_btn_click, width=160)\r\n        self.add_question_btn.grid(row=0, column=0, padx=(10,0), pady=10)\r\n\r\n        self.save_changes_btn = customtkinter.CTkButton(self.buttons_q_frame, text=\"Сохранить изменения\",\r\n                                       command=self._save_changes_btn_click, width=160)\r\n        self.save_changes_btn.grid(row=0, column=1, padx=10, pady=10)\r\n\r\n\r\n        # Создание рамки для кнопок возврата в меню или назад\r\n        self.return_buttons_frame = customtkinter.CTkFrame(self)\r\n        self.return_buttons_frame.grid(row=1, column=1, padx=10, pady=(10, 10), rowspan=2, sticky=\"se\")\r\n\r\n        self.back_to_menu_btn = customtkinter.CTkButton(self.return_buttons_frame, text='Назад',\r\n                                                        command=self.return_btn_click)\r\n        self.back_to_menu_btn.grid(row=0, column=0, padx=10, pady=(10, 10), sticky=E)\r\n\r\n        self.back_to_menu_btn = customtkinter.CTkButton(self.return_buttons_frame, text='Вернуться в меню',\r\n                                                        command=self.back_to_menu_btn_click)\r\n        self.back_to_menu_btn.grid(row=1, column=0, padx=10, pady=(0, 10), sticky=E)\r\n\r\n\r\n        self.protocol(\"WM_DELETE_WINDOW\", self._on_closing)\r\n\r\n        self.mainloop()\r\n\r\n    def _add_answer_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки add_answer_btn - добавляет новый ответ, ничего не возвращает.\"\"\"\r\n        if len(self.answers) >= 6:\r\n            messagebox.showwarning(title=\"Предупреждение\",\r\n                                   message=\"Максимальное количество ответов 6. Больше добавить нельзя.\")\r\n            return\r\n\r\n        input_answer = self.answer_entry.get()\r\n        if len(input_answer) == 0:\r\n            messagebox.showwarning(title=\"Предупреждение\", message=\"Данные не были введены!\")\r\n            return\r\n\r\n        correctness = self.selected_true.get()\r\n        answer = Answer(input_answer, correctness)\r\n\r\n        self.answers.append(answer)\r\n        self._init_checkbuttons()\r\n\r\n    def _remove_answer_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки remove_answer_btn- удаляет выбранные пользователем ответы, ничего не возвращает.\"\"\"\r\n        if len(self.answers) > 0:\r\n            selected_answers = []\r\n\r\n            for select in self.selections:\r\n                if select.get() > len(self.answers):\r\n                    continue\r\n\r\n                selected_answers.append(self.answers[select.get()])\r\n\r\n            for answer in selected_answers:\r\n                self.answers.remove(answer)\r\n\r\n            self._init_checkbuttons()\r\n\r\n    def _add_question_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки add_question_btn - добавляет новый вопрос, ничего не возвращает.\"\"\"\r\n        question_text = self.questionText_entry.get()\r\n\r\n        if not Validation.validate_question(question_text):\r\n            messagebox.showwarning(title=\"Предупреждение\",\r\n                                   message=\"Введены некорректные данные! Введите текст вопроса.\")\r\n            return\r\n\r\n        if len(self.answers) < 2:\r\n            messagebox.showwarning(title=\"Предупреждение\",\r\n                                   message=\"Количество вопросов должно быть не менее двух!\")\r\n            return\r\n\r\n        self.new_question = QuestionCheckButton(question_text, self.answers)\r\n        self.questions_storage.add_question(self.new_question)\r\n        messagebox.showinfo(title=\"Успешно\", message=\"Вопрос добавлен.\")\r\n\r\n    def _save_changes_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки save_changes_btn - сохраняет текущие вопросы, ничего не возвращает.\"\"\"\r\n        FileProvider.save_test_changes(self.questions_storage.test, self.questions_storage.test_path)\r\n        messagebox.showinfo(title=\"Успешно\", message=\"Изменения сохранены.\")\r\n\r\n    def _init_checkbuttons(self):\r\n        \"\"\"Инициализирует checkbuttons в соответствии с вопросами, ничего не возвращает.\"\"\"\r\n        self._clear_checkbuttons()\r\n\r\n        for i in range(len(self.answers)):\r\n            selected_id = IntVar(self)\r\n            selected_id.set(len(self.answers) + 1)\r\n            self.selections.append(selected_id)\r\n\r\n            answer_btn = customtkinter.CTkCheckBox(self.checkboxes_frame, text=self.answers[i].text,\r\n                                                   offvalue=len(self.answers) + 1,\r\n                                                   onvalue=i,\r\n                                                   variable=selected_id)\r\n\r\n            if self.answers[i].is_correct:\r\n                answer_btn.configure(text_color=\"green\")\r\n\r\n            answer_btn.grid(row=i, column=0, sticky=\"w\", padx=10, pady=(10,0))\r\n            self.check_buttons.append(answer_btn)\r\n\r\n    def _clear_checkbuttons(self):\r\n        \"\"\"Удаляет все инициализированные checkbuttons, ничего не возвращает.\"\"\"\r\n        for btn in self.check_buttons:\r\n            btn.destroy()\r\n        self.check_buttons.clear()\r\n        self.selections.clear()\r\n\r\n\r\n    def return_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки back_to_menu_btn - удаляет данное окно и создаёт объект MenuWindow.\"\"\"\r\n        self.withdraw()\r\n        addQuestion_window.AddQuestionWindow(self.questions_storage, self.user)\r\n        self.destroy()\r\n\r\n    def back_to_menu_btn_click(self):\r\n        \"\"\"Обработчик нажатия кнопки back_to_menu_btn - удаляет данное окно и создаёт объект MenuWindow.\"\"\"\r\n        self.withdraw()\r\n        menu_window.MenuWindow(self.user)\r\n        self.destroy()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/add_checkButtonQuestion_window.py b/add_checkButtonQuestion_window.py
--- a/add_checkButtonQuestion_window.py	(revision 3221a29cd16a63f105e330f633aa63662d5fcc86)
+++ b/add_checkButtonQuestion_window.py	(date 1744099849355)
@@ -25,7 +25,8 @@
         self.questions_storage = questions_storage
         self.user = user
 
-        self.geometry("800x420")
+        self.width = 800
+        self.height = 420
         self.title('Добавление вопроса с множественным выбором')
         self.resizable(False, True)
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.12\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 3221a29cd16a63f105e330f633aa63662d5fcc86)
+++ b/.idea/misc.xml	(date 1744099306024)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.12" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/Kursovik.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.13\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Kursovik.iml b/.idea/Kursovik.iml
--- a/.idea/Kursovik.iml	(revision 3221a29cd16a63f105e330f633aa63662d5fcc86)
+++ b/.idea/Kursovik.iml	(date 1744099306024)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.13" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.12" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
